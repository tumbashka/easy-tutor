<?php

namespace App\src\Telegram;

use App\Models\TelegramReminder;
use Exception;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Api;
use Telegram\Bot\Objects\Chat;
use Telegram\Bot\Objects\Message;
use Telegram\Bot\Objects\User;
use App\Models\User as UserModel;

abstract class BaseHandler
{
    public function __construct(
        protected Api $telegram,
        protected Chat $chat,
        protected User $from,
        protected Message $message,
    ) {
    }

    abstract public function process();

    abstract protected function handleUnknownCommand();

    protected function isConfirmedUser(): bool
    {
        $user = UserModel::getUserByTelegramID($this->from->id);
        if ($user) {
            return true;
        }

        return false;
    }

    protected function isPrivate(): bool
    {
        if ($this->chat->type == 'private') {
            return true;
        }

        return false;
    }

    protected function isGroup(): bool
    {
        if ($this->chat->type == 'group') {
            return true;
        }

        return false;
    }

    protected function sendTextMessage($text): void
    {
        $this->sendMessage([
            'chat_id' => $this->chat->id,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ]);
    }

    protected function sendMessage(array $params): void
    {
        try {
            $this->telegram->sendMessage($params);
        } catch (Exception $exception) {
            Log::error($exception->getMessage());
            echo $exception->getMessage();
        }
    }protected function editMessageText(array $params): void
    {
        try {
            $this->telegram->editMessageText($params);
        } catch (Exception $exception) {
            Log::error($exception->getMessage());
            echo $exception->getMessage();
        }
    }

    protected function deleteMessage(): bool
    {
        if ($this->message->from->isBot) {
            try {
                return $this->telegram->deleteMessage([
                    'chat_id' => $this->chat->id,
                    'message_id' => $this->message->messageId,
                ]);
            } catch (Exception $e) {
                $this->sendTextMessage($e->getMessage());
                Log::error($e->getMessage());
            }
        }
        return false;
    }

    protected function sendConfirmedUserError(): void
    {
        $this->sendTextMessage('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }

    protected function sendPrivateError(): void
    {
        $this->sendTextMessage('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º');
    }

    protected function sendGroupError(): void
    {
        $this->sendTextMessage('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ');
    }

    protected function sendStudentDontConnectError(): void
    {
        $this->sendTextMessage('–û—à–∏–±–∫–∞, —É—á–µ–Ω–∏–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.');
    }

    protected function sendStartTokenError(): void
    {
        $this->sendTextMessage(
            '–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/start <token>`'
        );
    }

    protected function sendGroupSetting(): void
    {
        $telegram_reminder = $this->getTelegramReminder();

        if ($telegram_reminder != null) {
            $disable = [[['text' => 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî', 'callback_data' => 'disable_remind']]];
            $enable = [[['text' => '‚úÖ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî', 'callback_data' => 'enable_remind']]];

            $keyboard = [
                [['text' => 'üôãüèª‚Äç‚ôÄÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üôãüèª‚Äç‚ôÇÔ∏è', 'callback_data' => 'sendKeyboardSetStudent']],
                [
                    [
                        'text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏ üîî',
                        'callback_data' => 'change_before_lesson_minutes'
                    ]
                ],
                [
                    [
                        'text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –î–ó üìù',
                        'callback_data' => 'change_homework_reminder_time'
                    ]
                ],
                [
                    [
                        ['text' => '‚óÄ –ù–∞–∑–∞–¥ ‚óÄ', 'callback_data' => "handleMenu"],
                        ['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']
                    ]
                ],
            ];
            if ($telegram_reminder->is_enabled) {
                $keyboard = array_merge($disable, $keyboard);
            } else {
                $keyboard = array_merge($enable, $keyboard);
            }
        } else {
            $keyboard = [
                [['text' => 'üôãüèª‚Äç‚ôÄÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üôãüèª‚Äç‚ôÇÔ∏è', 'callback_data' => 'sendKeyboardSetStudent']],
                [
                    ['text' => '‚óÄ –ù–∞–∑–∞–¥ ‚óÄ', 'callback_data' => "handleMenu"],
                    ['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']
                ],
            ];

            $this->deleteMessage();

            $this->sendMessage([
                'chat_id' => $this->chat->id,
                'text' => '–£—á–µ–Ω–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                'parse_mode' => 'Markdown',
                'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
            ]);

            return;
        }

        if ($telegram_reminder->is_enabled) {
            $text_body = <<<EOD
            –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ***–≤–∫–ª—é—á–µ–Ω—ã***
            –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–µ–º –∑–∞ ***{$telegram_reminder->before_lesson_minutes} –º–∏–Ω.***
            –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–ó –≤ ***{$telegram_reminder->homework_reminder_time}***
            EOD;
        } else {
            $text_body = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ***–≤—ã–∫–ª—é—á–µ–Ω—ã***';
        }
        $text = <<<EOD
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:
            –ì—Ä—É–ø–ø–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–µ–Ω–∏–∫: ***{$telegram_reminder->student->name}***.
            {$text_body}
            EOD;
        $this->deleteMessage();

        $this->sendMessage([
            'chat_id' => $this->chat->id,
            'text' => $text,
            'parse_mode' => 'Markdown',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    protected function sendKeyboardSetStudent(): void
    {
        if (!$this->isConfirmedUser()) {
            $this->sendConfirmedUserError();
            $this->sendStartTokenError();

            return;
        }
        if (!$this->isGroup()) {
            $this->sendGroupError();

            return;
        }

        $user = UserModel::getUserByTelegramID($this->from->id);
        $students = $user->students->sortBy('name');

        $keyboard = [];
        foreach ($students as $student) {
            $keyboard[] = [['text' => $student->name, 'callback_data' => 'set_student ' . $student->id]];
        }
        $keyboard[] = [
            ['text' => '‚óÄ –ù–∞–∑–∞–¥ ‚óÄ', 'callback_data' => "handleMenu"],
            ['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']
        ];

        $this->editMessageText([
            'chat_id' => $this->chat->id,
            'message_id' => $this->message->messageId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    protected function sendHomeworkMenu(): void
    {
        if (!$this->isConfirmedUser()) {
            $this->sendConfirmedUserError();
            $this->sendStartTokenError();

            return;
        }
        if (!$this->isGroup()) {
            $this->sendGroupError();

            return;
        }
        $keyboard[] = [['text' => '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚ûï', 'callback_data' => 'add_homework']];
        $keyboard[] = [['text' => '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è üëÄ', 'callback_data' => 'get_list_homework']];
        $keyboard[] = [['text' => '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ', 'callback_data' => 'get_complete_homework_menu']];
        $keyboard[] = [
            ['text' => '‚óÄ –ù–∞–∑–∞–¥ ‚óÄ', 'callback_data' => "handleMenu"],
            ['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']
        ];
        $this->deleteMessage();

        $this->sendMessage([
            'chat_id' => $this->chat->id,
            'text' => '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    protected function getTelegramReminder(): ?TelegramReminder
    {
        return TelegramReminder::firstWhere('chat_id', $this->chat->id);
    }

    protected function getStudent()
    {
        $reminder = $this->getTelegramReminder();

        return $reminder->student ?? null;
    }

    protected function putToCacheData(string $key, mixed $data): void
    {
        Cache::put("telegram_data_{$this->chat->id}_{$key}", $data, now()->addMinutes(5));
    }

    protected function getCachedData(string $key)
    {
        return Cache::get("telegram_data_{$this->chat->id}_{$key}");
    }

    protected function pullCachedData(string $key)
    {
        return Cache::pull("telegram_data_{$this->chat->id}_{$key}");
    }

    protected function forgetCachedData(string $key): void
    {
        Cache::forget("telegram_data_{$this->chat->id}_{$key}");
    }

    protected function handleLessonsSchedule(Carbon|string|null $date = null): void
    {
        $date = is_null($date) ? Carbon::today() : Carbon::parse($date);

        $dayOfWeek = getDayName($date);
        $formattedDate = $date->format('d.m.Y');

        $message = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ";

        $message .= $date->isToday() ? "–°–µ–≥–æ–¥–Ω—è" : $formattedDate;
        $message .= " {$dayOfWeek}";
        $message .= "*\n\n";

        $user = UserModel::getUserByTelegramID($this->from->id);
        $lessons = $user->getLessonsOnDate($date);

        if ($lessons->isEmpty()) {
            $message .= "üòî –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.";
        } else {
            $message .= "üïí *–ó–∞–Ω—è—Ç–∏—è:*\n";
            foreach ($lessons as $key => $lesson) {
                $startTime = $lesson->start->format('H:i');
                $endTime = $lesson->end->format('H:i');
                $paymentStatus = $lesson->is_paid ? '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ ‚úÖ' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚ùå';

                $message .= sprintf(
                    "%d. *%s*\n‚è∞ %s‚Äì%s\n%s\n\n",
                    $key + 1,
                    $lesson->student_name,
                    $startTime,
                    $endTime,
                    $paymentStatus
                );
            }
        }
        $paginationDatesStep = 3;
        $dateStart = $date->copy()->subDays($paginationDatesStep);

        $keyboard = [];
        $row = [];
        for ($i = 0; $i <= $paginationDatesStep * 2; $i++) {
            $row[] = [
                'text' => $dateStart->format('d.m'),
                'callback_data' => "handleLessonsSchedule {$dateStart}"
            ];
            $dateStart->addDay();
        }
        $keyboard[] = $row;
        if ($lessons->isNotEmpty()) {
            $keyboard[] = [['text' => '–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'callback_data' => "getPaymentMenu {$date}"]];
        }
        $keyboard[] = [
            ['text' => '‚óÄ –ù–∞–∑–∞–¥ ‚óÄ', 'callback_data' => "handleMenu"],
            ['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']
        ];


        $this->deleteMessage();

        $this->sendMessage([
            'chat_id' => $this->chat->id,
            'text' => $message,
            'parse_mode' => 'Markdown',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    protected function handleMenu(): void
    {
        $keyboard = [];

        $student = $this->getStudent();

        $keyboard[] = [['text' => 'üôãüèª‚Äç‚ôÄÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üôãüèª‚Äç‚ôÇÔ∏è', 'callback_data' => "sendKeyboardSetStudent"]];
        if ($student) {
            $keyboard[] = [['text' => 'üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìù', 'callback_data' => "sendHomeworkMenu"]];
        }
        $keyboard[] = [['text' => 'üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïí', 'callback_data' => "handleLessonsSchedule"]];
        $keyboard[] = [['text' => 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†Ô∏è', 'callback_data' => "sendGroupSetting"]];
        $keyboard[] = [['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']];


        if ($this->from->isBot) {
            $this->editMessageText([
                'chat_id' => $this->chat->id,
                'message_id' => $this->message->messageId,
                'text' => '*–ú–µ–Ω—é:*',
                'parse_mode' => 'Markdown',
                'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
            ]);
        } else {
            $this->deleteMessage();
            $this->sendMessage([
                'chat_id' => $this->chat->id,
                'text' => '*–ú–µ–Ω—é:*',
                'parse_mode' => 'Markdown',
                'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
            ]);
        }
    }
}
