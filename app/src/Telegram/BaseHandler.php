<?php

namespace App\src\Telegram;


use App\Models\TelegramReminder;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Objects\User;
use Telegram\Bot\Api;
use Telegram\Bot\Objects\Chat;

abstract class BaseHandler
{
    public function __construct(
        protected Api  $telegram,
        protected Chat $chat,
        protected User $from,
    )
    {

    }

    abstract function process();

    protected function is_confirmed_user(): bool
    {
        $user = \App\Models\User::getUserByTelegramID($this->from->id);
        if ($user) {
            return true;
        }
        return false;
    }

    protected function is_private(): bool
    {
        if ($this->chat->type == 'private') {
            return true;
        }
        return false;
    }

    protected function is_group(): bool
    {
        if ($this->chat->type == 'group') {
            return true;
        }
        return false;
    }

    protected function send_message($text): void
    {
        $this->telegram->sendMessage([
            'chat_id' => $this->chat->id,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ]);
    }
    protected function send_confirmed_user_error(): void
    {
        $this->send_message('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }
    protected function send_private_error(): void
    {
        $this->send_message('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º');
    }
    protected function send_group_error(): void
    {
        $this->send_message('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ');
    }

    protected function sendGroupSetting(): void
    {
        $telegram_reminder = TelegramReminder::firstWhere('chat_id', $this->chat->id);

        if ($telegram_reminder != null) {
            $disable = [[['text' => 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî', 'callback_data' => 'disable_remind']]];
            $enable = [[['text' => '‚úÖ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî', 'callback_data' => 'enable_remind']]];

            $keyboard = [
                [['text' => 'üôãüèª‚Äç‚ôÄÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üôãüèª‚Äç‚ôÇÔ∏è', 'callback_data' => 'set_student_menu'],],
                [['text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏ üîî', 'callback_data' => 'change_before_lesson_minutes'],],
                [['text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –î–ó üìù', 'callback_data' => 'change_homework_reminder_time'],],
                [['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close'],],
            ];
            if ($telegram_reminder->is_enabled) {
                $keyboard = array_merge($disable, $keyboard);
            } else {
                $keyboard = array_merge($enable, $keyboard);
            }
        } else {
            $keyboard = [
                [['text' => 'üôãüèª‚Äç‚ôÄÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üôãüèª‚Äç‚ôÇÔ∏è', 'callback_data' => 'set_student_menu'],],
                [['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close'],],
            ];

            Telegram::sendMessage([
                'chat_id' => $this->chat->id,
                'text' => '–£—á–µ–Ω–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                'parse_mode' => 'Markdown',
                'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
            ]);
            return;
        }

        if ($telegram_reminder->is_enabled) {
            $text_body = <<<EOD
            –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ***–≤–∫–ª—é—á–µ–Ω—ã***
            –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–µ–º –∑–∞ ***{$telegram_reminder->before_lesson_minutes} –º–∏–Ω.***
            –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–ó –≤ ***{$telegram_reminder->homework_reminder_time}***
            EOD;
        } else {
            $text_body = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ***–≤—ã–∫–ª—é—á–µ–Ω—ã***";
        }
        $text = <<<EOD
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:
            –ì—Ä—É–ø–ø–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–µ–Ω–∏–∫: ***{$telegram_reminder->student->name}***.
            {$text_body}
            EOD;

        Telegram::sendMessage([
            'chat_id' => $this->chat->id,
            'text' => $text,
            'parse_mode' => 'Markdown',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    protected function sendKeyboardSetStudent(): void
    {
        if (!$this->is_confirmed_user()) {
            $this->send_confirmed_user_error();
            return;
        }
        if (!$this->is_group()) {
            $this->send_group_error();
            return;
        }

        $user = \App\Models\User::getUserByTelegramID($this->from->id);
        $students = $user->students;

        $keyboard = [];
        foreach ($students as $student) {
            $keyboard[] = [['text' => $student->name, 'callback_data' => 'set_student ' . $student->id]];
        }
        $keyboard[] = [['text' => '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', 'callback_data' => 'close']];
        Telegram::sendMessage([
            'chat_id' => $this->chat->id,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

}
